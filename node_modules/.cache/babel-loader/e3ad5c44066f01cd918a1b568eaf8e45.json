{"remainingRequest":"/Users/choijuwon/Desktop/development/mackta-merge/mackta/node_modules/babel-loader/lib/index.js!/Users/choijuwon/Desktop/development/mackta-merge/mackta/src/store/index.js","dependencies":[{"path":"/Users/choijuwon/Desktop/development/mackta-merge/mackta/src/store/index.js","mtime":1565005978708},{"path":"/Users/choijuwon/Desktop/development/mackta-merge/mackta/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/choijuwon/Desktop/development/mackta-merge/mackta/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport axios from \"axios\";\nimport { router } from \"../routes/index.js\";\nVue.use(Vuex);\nexport var store = new Vuex.Store({\n  state: {\n    inputDepart: \"\",\n    inputDest: \"\",\n    inputDate: \"\",\n    allUsers: [{\n      id: 1,\n      name: \"nick\",\n      email: \"nick@naver.com\",\n      password: \"1234\"\n    }, {\n      id: 2,\n      name: \"juwon\",\n      email: \"juwon@naver.com\",\n      password: \"12345\"\n    }],\n    userInfo: null,\n    isLogin: false,\n    isLoginError: false\n  },\n  mutations: {\n    SET_DEPART: function SET_DEPART(state, inputDepart) {\n      state.inputDepart = inputDepart;\n    },\n    SET_DEST: function SET_DEST(state, inputDest) {\n      state.inputDest = inputDest;\n    },\n    SET_DATE: function SET_DATE(state, inputDate) {\n      state.inputDate = inputDate;\n    },\n    SET_LOGIN: function SET_LOGIN(state, loginSet) {\n      state.loginSet = loginSet;\n    },\n    SET_LOGIN_SUCCESS: function SET_LOGIN_SUCCESS(state, payload) {\n      state.isLogin = true, state.isLoginError = false;\n      state.userInfo = payload;\n      router.push({\n        name: \"search\"\n      });\n    },\n    SET_LOGIN_ERROR: function SET_LOGIN_ERROR(state) {\n      state.isLogin = false, state.isLoginError = true;\n    } // SET_USER(state, userId, password) {\n    //   state.loginSet.userId = userId;\n    //   state.loginSet.password = password;\n    // }\n\n  },\n  actions: {\n    INPUT_DEPART: function INPUT_DEPART(_ref, value) {\n      var commit = _ref.commit;\n      commit(\"SET_DEPART\", value);\n    },\n    INPUT_DEST: function INPUT_DEST(_ref2, value) {\n      var commit = _ref2.commit;\n      commit(\"SET_DEST\", value);\n    },\n    INPUT_DATE: function INPUT_DATE(_ref3, value) {\n      var commit = _ref3.commit;\n      commit(\"SET_DATE\", value);\n    },\n    LOGIN: function LOGIN(_ref4, loginObj) {\n      var commit = _ref4.commit;\n      axios.post(\"http://127.0.0.1:8000/api/rest-auth/login/\", loginObj).then(function (res) {\n        var token = res.data.token; // console.log(res.data.user.first_name);\n\n        var userInfo = {\n          first_name: res.data.user.first_name\n        };\n        localStorage.setItem(\"access_token\", token); // this.dispatch(\"getMemberInfo\");\n\n        commit(\"SET_LOGIN_SUCCESS\", userInfo);\n        axios.get(\"http://127.0.0.1:8000/api/rest-auth/user\", token).then;\n        console.log(res);\n      }).catch(function (error) {\n        alert(\"이메일과 비밀번호를 확인해주세요\");\n        console.log(error);\n      }); // let selectedUser = null;\n      // state.allUsers.forEach(user => {\n      //     if (user.email === loginObj.email) {\n      //         selectedUser = user;\n      //     }\n      // });\n      // if (selectedUser === null) {\n      //     // alert(\"입력하신 이메일이 존재하지 않습니다.\");\n      //     commit(\"SET_LOGIN_ERROR\");\n      // }\n      // if (selectedUser != null) {\n      //     if (selectedUser.password === loginObj.password) {\n      //         commit(\"SET_LOGIN_SUCCESS\", selectedUser);\n      //         router.push({ name: \"search\" });\n      //     } else {\n      //         // alert(\"이메일과 비밀번호가 일치하지 않습니다.\");\n      //         commit(\"SET_LOGIN_ERROR\");\n      //     }\n      // }\n    } // getMemberInfo() {\n    //     let token = localStorage.getItem(\"access_token\");\n    //     let config = {\n    //         headers: {\n    //             \"access-token\": token\n    //         }\n    //     };\n    //     axios\n    //         .get(\"http://127.0.0.1:8000/api/user/\", config)\n    //         .then(response => {\n    //             let userInfo = {\n    //                 first_name: response.data.user.first_name\n    //             };\n    //             commit(\"SET_LOGIN_SUCCESS\", userInfo);\n    //         })\n    //         .catch(() => {\n    //             alert(\"이메일과 비밀번호를 확인해주세요\");\n    //             // eslint-disable-next-line no-console\n    //             console.log(\"1\");\n    //         });\n    // }\n\n  }\n});",{"version":3,"sources":["/Users/choijuwon/Desktop/development/mackta-merge/mackta/src/store/index.js"],"names":["Vue","Vuex","axios","router","use","store","Store","state","inputDepart","inputDest","inputDate","allUsers","id","name","email","password","userInfo","isLogin","isLoginError","mutations","SET_DEPART","SET_DEST","SET_DATE","SET_LOGIN","loginSet","SET_LOGIN_SUCCESS","payload","push","SET_LOGIN_ERROR","actions","INPUT_DEPART","value","commit","INPUT_DEST","INPUT_DATE","LOGIN","loginObj","post","then","res","token","data","first_name","user","localStorage","setItem","get","console","log","catch","error","alert"],"mappings":"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","sourcesContent":["import Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport axios from \"axios\";\nimport { router } from \"../routes/index.js\";\n\nVue.use(Vuex);\n\nexport const store = new Vuex.Store({\n    state: {\n        inputDepart: \"\",\n        inputDest: \"\",\n        inputDate: \"\",\n        allUsers: [\n            { id: 1, name: \"nick\", email: \"nick@naver.com\", password: \"1234\" },\n            {\n                id: 2,\n                name: \"juwon\",\n                email: \"juwon@naver.com\",\n                password: \"12345\"\n            }\n        ],\n        userInfo: null,\n        isLogin: false,\n        isLoginError: false\n    },\n    mutations: {\n        SET_DEPART(state, inputDepart) {\n            state.inputDepart = inputDepart;\n        },\n        SET_DEST(state, inputDest) {\n            state.inputDest = inputDest;\n        },\n        SET_DATE(state, inputDate) {\n            state.inputDate = inputDate;\n        },\n        SET_LOGIN(state, loginSet) {\n            state.loginSet = loginSet;\n        },\n        SET_LOGIN_SUCCESS(state, payload) {\n            (state.isLogin = true), (state.isLoginError = false);\n            state.userInfo = payload;\n            router.push({ name: \"search\" });\n        },\n        SET_LOGIN_ERROR(state) {\n            (state.isLogin = false), (state.isLoginError = true);\n        }\n        // SET_USER(state, userId, password) {\n        //   state.loginSet.userId = userId;\n        //   state.loginSet.password = password;\n        // }\n    },\n    actions: {\n        INPUT_DEPART({ commit }, value) {\n            commit(\"SET_DEPART\", value);\n        },\n        INPUT_DEST({ commit }, value) {\n            commit(\"SET_DEST\", value);\n        },\n        INPUT_DATE({ commit }, value) {\n            commit(\"SET_DATE\", value);\n        },\n        LOGIN({ commit }, loginObj) {\n            axios\n                .post(\"http://127.0.0.1:8000/api/rest-auth/login/\", loginObj)\n                .then(res => {\n                    let token = res.data.token;\n                    // console.log(res.data.user.first_name);\n                    let userInfo = {\n                        first_name: res.data.user.first_name\n                    };\n                    localStorage.setItem(\"access_token\", token);\n                    // this.dispatch(\"getMemberInfo\");\n                    commit(\"SET_LOGIN_SUCCESS\", userInfo);\n                    axios.get(\"http://127.0.0.1:8000/api/rest-auth/user\", token)\n                        .then;\n                    console.log(res);\n                })\n                .catch(error => {\n                    alert(\"이메일과 비밀번호를 확인해주세요\");\n                    console.log(error);\n                });\n            // let selectedUser = null;\n\n            // state.allUsers.forEach(user => {\n            //     if (user.email === loginObj.email) {\n            //         selectedUser = user;\n            //     }\n            // });\n            // if (selectedUser === null) {\n            //     // alert(\"입력하신 이메일이 존재하지 않습니다.\");\n            //     commit(\"SET_LOGIN_ERROR\");\n            // }\n            // if (selectedUser != null) {\n            //     if (selectedUser.password === loginObj.password) {\n            //         commit(\"SET_LOGIN_SUCCESS\", selectedUser);\n            //         router.push({ name: \"search\" });\n            //     } else {\n            //         // alert(\"이메일과 비밀번호가 일치하지 않습니다.\");\n            //         commit(\"SET_LOGIN_ERROR\");\n            //     }\n            // }\n        }\n        // getMemberInfo() {\n        //     let token = localStorage.getItem(\"access_token\");\n        //     let config = {\n        //         headers: {\n        //             \"access-token\": token\n        //         }\n        //     };\n        //     axios\n        //         .get(\"http://127.0.0.1:8000/api/user/\", config)\n        //         .then(response => {\n        //             let userInfo = {\n        //                 first_name: response.data.user.first_name\n        //             };\n        //             commit(\"SET_LOGIN_SUCCESS\", userInfo);\n        //         })\n        //         .catch(() => {\n        //             alert(\"이메일과 비밀번호를 확인해주세요\");\n        //             // eslint-disable-next-line no-console\n        //             console.log(\"1\");\n        //         });\n        // }\n    }\n});\n"]}]}